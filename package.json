{
    "name": "php-namespace-resolver",
    "displayName": "PHP Namespace Resolver",
    "description": "Import and expand php namespaces",
    "version": "0.4.0",
    "publisher": "ctf0",
    "author": "ctf0",
    "repository": "https://github.com/ctf0/PHP-Namespace-Resolver",
    "engines": {
        "vscode": "^1.68.0"
    },
    "categories": [
        "Other"
    ],
    "keywords": [
        "php",
        "namespace",
        "class",
        "import",
        "expand"
    ],
    "activationEvents": [
        "workspaceContains:composer.json",
        "namespaceResolver.import",
        "namespaceResolver.importAll",
        "namespaceResolver.expand",
        "namespaceResolver.sort",
        "namespaceResolver.generateNamespace",
        "onStartupFinished"
    ],
    "main": "./out/main",
    "icon": "images/icon.png",
    "contributes": {
        "commands": [
            {
                "command": "namespaceResolver.import",
                "title": "Import Class",
                "category": "PHP Namespace Resolver"
            },
            {
                "command": "namespaceResolver.importAll",
                "title": "Import All Classes",
                "category": "PHP Namespace Resolver"
            },
            {
                "command": "namespaceResolver.expand",
                "title": "Expand Class",
                "category": "PHP Namespace Resolver"
            },
            {
                "command": "namespaceResolver.sort",
                "title": "Sort Imports",
                "category": "PHP Namespace Resolver"
            },
            {
                "command": "namespaceResolver.generateNamespace",
                "title": "Generate namespace for this file",
                "category": "PHP Namespace Resolver"
            },
            {
                "command": "namespaceResolver.checkForNamespaces",
                "title": "Check for namespaces project wide",
                "category": "PHP Namespace Resolver"
            }
        ],
        "keybindings": [
            {
                "command": "namespaceResolver.import",
                "key": "ctrl+alt+i",
                "when": "editorLangId == php"
            },
            {
                "command": "namespaceResolver.importAll",
                "key": "ctrl+alt+a",
                "when": "editorLangId == php"
            },
            {
                "command": "namespaceResolver.expand",
                "key": "ctrl+alt+e",
                "when": "editorLangId == php"
            },
            {
                "command": "namespaceResolver.sort",
                "key": "ctrl+alt+s",
                "when": "editorLangId == php"
            },
            {
                "command": "namespaceResolver.generateNamespace",
                "key": "ctrl+alt+g",
                "when": "editorLangId == php"
            }
        ],
        "menus": {
            "editor/context": [
                {
                    "when": "editorLangId == php",
                    "command": "namespaceResolver.import",
                    "group": "0_namespace_resolver@1"
                },
                {
                    "when": "editorLangId == php",
                    "command": "namespaceResolver.importAll",
                    "group": "0_namespace_resolver@2"
                },
                {
                    "when": "editorLangId == php",
                    "command": "namespaceResolver.expand",
                    "group": "0_namespace_resolver@3"
                },
                {
                    "when": "editorLangId == php",
                    "command": "namespaceResolver.sort",
                    "group": "0_namespace_resolver@4"
                },
                {
                    "when": "editorLangId == php",
                    "command": "namespaceResolver.generateNamespace",
                    "group": "0_namespace_resolver@7"
                }
            ],
            "commandPalette": [
                {
                    "command": "namespaceResolver.import",
                    "when": "editorLangId == php"
                },
                {
                    "command": "namespaceResolver.importAll",
                    "when": "editorLangId == php"
                },
                {
                    "command": "namespaceResolver.expand",
                    "when": "editorLangId == php"
                },
                {
                    "command": "namespaceResolver.sort",
                    "when": "editorLangId == php"
                },
                {
                    "command": "namespaceResolver.generateNamespace",
                    "when": "editorLangId == php"
                },
                {
                    "command": "namespaceResolver.checkForNamespaces"
                }
            ]
        },
        "configuration": {
            "title": "PHP Namespace Resolver",
            "properties": {
                "namespaceResolver.exclude": {
                    "type": "string",
                    "default": "**/node_modules/**",
                    "description": "Exclude glob pattern while finding files"
                },
                "namespaceResolver.showMessageOnStatusBar": {
                    "type": "boolean",
                    "default": false,
                    "description": "Show message on status bar instead of notification box"
                },
                "namespaceResolver.sort.auto": {
                    "type": "boolean",
                    "default": true,
                    "description": "Auto sort after imports"
                },
                "namespaceResolver.sort.onSave": {
                    "type": "boolean",
                    "default": false,
                    "description": "Auto sort when a file is saved"
                },
                "namespaceResolver.sort.alphabetically": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sort imports in alphabetical order instead of line length"
                },
                "namespaceResolver.sort.natural": {
                    "type": "boolean",
                    "default": false,
                    "description": "Sort imports using a 'natural order' algorithm"
                },
                "namespaceResolver.leadingSeparator": {
                    "type": "boolean",
                    "default": true,
                    "description": "Expand class with leading namespace separator"
                },
                "namespaceResolver.php.command": {
                    "type": "string",
                    "default": "php",
                    "description": "php command path"
                },
                "namespaceResolver.php.builtIns": {
                    "type": "array",
                    "default": [
                        "get_declared_classes()",
                        "get_declared_interfaces()"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "description": "php methods to get builtin/extension classes & interfaces"
                },
                "namespaceResolver.checkForNamespaces.classMapFileGlob": {
                    "type": "string",
                    "default": "vendor/**/composer/autoload_classmap.php",
                    "description": "composer autoload_classmap file(s) path glob"
                },
                "namespaceResolver.checkForNamespaces.rg.command": {
                    "type": "string",
                    "default": "rg",
                    "markdownDescription": "ripgrep command path (require [ripgrep](https://github.com/BurntSushi/ripgrep#installation))"
                },
                "namespaceResolver.checkForNamespaces.rg.excludeDirs": {
                    "type": "array",
                    "default": [
                        "vendor",
                        "stubs",
                        "bootstrap",
                        "resources",
                        "storage",
                        "lang"
                    ],
                    "items": {
                        "type": "string"
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "markdownDescription": "exclude directories from namespace use call search\n\n(.gitignore contents are already excluded)"
                }
            }
        }
    },
    "scripts": {
        "vscode:prepublish": "npm run esbuild-base -- --minify",
        "esbuild-base": "esbuild ./src/extension.ts --bundle --outfile=out/main.js --external:vscode --format=cjs --platform=node",
        "esbuild": "npm run esbuild-base -- --sourcemap",
        "esbuild-watch": "npm run esbuild-base -- --sourcemap --watch",
        "watch": "npm run vscode:prepublish"
    },
    "devDependencies": {
        "@types/fs-extra": "^9.0.13",
        "@types/node": "^18.11.4",
        "@types/vscode": "^1.68.0",
        "esbuild": "^0.15.13",
        "typescript": "^4.6.3"
    },
    "dependencies": {
        "escape-string-regexp": "^5.0.0",
        "execa": "^6.1.0",
        "find-up": "^6.3.0",
        "fs-extra": "^11.1.0",
        "lodash.groupby": "^4.6.0",
        "node-natural-sort": "^0.8.6",
        "php-parser": "^3.1.2"
    }
}
